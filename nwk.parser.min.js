/*
* A generic Newick hand-rolled tokenizer and recursive descent parser with options tailored for OneZoom style nwk strings (see grammar/grammar.specialized.gram)
*
* This parser accepts all valid forms of Newick, including unnamed nodes, no distances, and partial distances
* Author: Bremen Braun (konapun) for TimeTree (www.timetree.org), 2013
*/
var nwk={};nwk.parser={tokenize:function(e,t){t=t||{"(":/\(/,")":/\)/,":":/:/,";":/;/,",":/,/,NUMBER:/\d+\.*\d*|\.\d+/,STRING:/[a-zA-Z_\+\.\\\-\d'\s\[\]\*\/{}]+/};var n=function(e){var n;Object.keys(t).some(function(r){var i=new RegExp(t[r]);if(e.match(i)){n=r;return true}});return n},r=0,i="";Object.keys(t).forEach(function(e){var n=t[e];if(r>0){i+="|"}i+="("+n.source+")";r++});var s=e.split(new RegExp(i)),o=[];for(var u=0;u<s.length;u++){var a=s[u];if(a){o.push({symbol:a,type:n(a)})}}return o},parse:function(e){var t;if(Object.prototype.toString.call(e)==="[object Array]"){t=e}else{t=this.tokenize(e)}var n=0,r=function(){this.id=n++;this.data="";this.branchlength=0;this.children=[]},i=null,s=null,o=t.shift(),u=[],a=function(e){if(o.type===e){var n=o.symbol;o=t.shift();return n}return false},f=function(e){var t=o.symbol;if(a(e)){return t}throw new Error("Unexpected symbol "+t+", expected "+e)},l=function(){if(a(":")){var e=f("NUMBER");i.branchlength=parseFloat(e)}},c=function(){var e=o.symbol,t="";if(a("STRING")||a("NUMBER")){t=e}return t},h=function(){m();l()},p=function(){h();while(a(",")){h()}},d=function(){if(a("(")){var e=new r;u.push(e);if(!s){s=e}p();f(")");var t=u.pop(),n=c(),o=u[u.length-1]||s;t.data=n;if(t!==o)o.addChild(t);i=t}else{throw new Error("Expected (")}},v=function(){var e=c(),t=new r;t.data=e;if(u.length-1>=0){u[u.length-1].addChild(t)}else{s=t}i=t},m=function(){if(o.symbol==="("){d()}else{v()}},g=function(){if(o.symbol==="("){m()}else{h()}f(";");return s},y=function(){return g()};r.prototype.addChild=function(e){this.children.push(e)};r.prototype.visit=function(e){e(this);for(var t=0;t<this.children.length;t++){this.children[t].visit(e)}};r.prototype.clone=function(e){if(typeof e==="undefined")e=false;var t=function(e){var t=new r;for(property in e){if(e.hasOwnProperty(property)){t[property]=e[property]}}t.id=n++;return t},i=function(e){var n=t(e);n.children=[];for(var r=0;r<e.children.length;r++){n.addChild(i(e.children[r]))}return n};if(e)return i(this);return t(this)};return y()}};nwk.converter={};nwk.converter.toBinary=function(e){var t=function(e){var t;if(e.children.length>0)t=e.children[0];for(var n=1;n<e.children.length;n++){var r=e.children[n];if(r.branchlength<t.branchlength){t=r}}return t},n=function(e){if(e.children.length<3){return e}var n=e.children,r=t(e),i=[];for(var s=0;s<n.length;s++){var o=n[s];if(o!==r){o.branchlength-=r.branchlength;i.push(o)}}var u=e.clone();u.data="";u.branchlength=r.branchlength;u.children=i;e.children=[r,u]};var r=e.clone(true);r.visit(function(e){n(e)});return r};nwk.converter.toOneZoom=function(e,t){t=t||false;var n=function(){this.cname=null;this.name1=null;this.name2=null;this.hasname1=false;this.hasname2=false;this.lengthbr=null;this.phylogenetic_diversity=0;this.richness_val=0;this.child1=null;this.child2=null;this.popstab="U";this.redlist="NE"},r=function(e){e=e.replace(/\[/g,"(").replace(/\]/g,")").replace(/\*/g,",");var t=function(e){var t={"{":/{/,"}":/}/,_:/_/,CONS_SYM:/^EX|EW|CR|EN|VU|NT|LC|DD|NE$/,STAB_SYM:/^[U|I|S|D]$/,STRING:/[a-zA-Z\+\.\(\),\\\-\d'\s\/]+/};return nwk.parser.tokenize(e,t)},n=t(e),r=n.shift(),i={commonName:"",genus:"",species:"",stability:"U",conservationStatus:"NE"},s=function(e){if(r){if(r.type===e){var t=r.symbol;r=n.shift();return t}}return false},o=function(e){if(r){var t=r.symbol;if(s(e)){return t}}return false},u=function(t){var n=o(t);if(n===false){throw new Error('Unexpected symbol in "'+e+'", expected '+t)}},a=function(){if(s("_")){i.conservationStatus=s("CONS_SYM");u("_");i.stability=s("STAB_SYM")}},f=function(){var e=s("STRING");if(e)i.commonName=e},l=function(){if(s("{")){f();a();u("}")}},c=function(){var e=s("STRING");if(e)i.genus=e;if(o("_")){i.species=s("STRING")}},h=function(){c();l()};h();return i},i=function(e){var t=new n,i=e.data,s=r(i);t.cname=s.commonName;t.name1=s.genus;t.name2=s.species;t.popstab=s.stability;t.redlist=s.conservationStatus;t.lengthbr=e.branchlength;t.phylogenetic_diversity=0;t.richness_val=0;if(t.name1)t.hasname1=true;if(t.name2)t.hasname2=true;return t},s=function(e){var t=function(e){var n=i(e);for(var r=0;r<e.children.length;r++){n.addChild(t(e.children[r]))}return n};return t(e)};n.prototype.addChild=function(e){if(this.child1==null){this.child1=e}else if(this.child2==null){this.child2=e}else{if(!t){throw new Error("Can't convert tree to OneZoom - not a binary tree")}else{this.child2=e}}};n.prototype.visit=function(e){e(this);if(this.child1)this.child1.visit(e);if(this.child2)this.child2.visit(e)};return s(e)};nwk.converter.toJSON=function(e,t){return JSON.stringify(e)};nwk.debugger={};nwk.debugger.findNonbinaryNodes=function(e){var t=[];e.visit(function(e){if(e.children.length>2)t.push(e)});return t};nwk.debugger.findUnnamedNodes=function(e){var t=[];e.visit(function(e){if(e.data==="")t.push(e)});return t};nwk.debugger.findUnlengthedNodes=function(e){var t=[];e.visit(function(e){if(e.branchlength==0)t.push(e)});return t};nwk.debugger.findLeaves=function(e){var t=[];e.visit(function(e){if(e.children.length==0)t.push(e)});return t};exports=typeof exports!=="undefined"?exports:{};exports.parser=nwk.parser;exports.converter=nwk.converter;exports.debugger=nwk.debugger